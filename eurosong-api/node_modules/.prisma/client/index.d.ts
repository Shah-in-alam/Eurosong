
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model artists
 * 
 */
export type artists = $Result.DefaultSelection<Prisma.$artistsPayload>
/**
 * Model songs
 * 
 */
export type songs = $Result.DefaultSelection<Prisma.$songsPayload>
/**
 * Model voters
 * 
 */
export type voters = $Result.DefaultSelection<Prisma.$votersPayload>
/**
 * Model votes
 * 
 */
export type votes = $Result.DefaultSelection<Prisma.$votesPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Artists
 * const artists = await prisma.artists.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Artists
   * const artists = await prisma.artists.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.artists`: Exposes CRUD operations for the **artists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artists
    * const artists = await prisma.artists.findMany()
    * ```
    */
  get artists(): Prisma.artistsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.songs`: Exposes CRUD operations for the **songs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.songs.findMany()
    * ```
    */
  get songs(): Prisma.songsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voters`: Exposes CRUD operations for the **voters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Voters
    * const voters = await prisma.voters.findMany()
    * ```
    */
  get voters(): Prisma.votersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.votes`: Exposes CRUD operations for the **votes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.votes.findMany()
    * ```
    */
  get votes(): Prisma.votesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    artists: 'artists',
    songs: 'songs',
    voters: 'voters',
    votes: 'votes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "artists" | "songs" | "voters" | "votes"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      artists: {
        payload: Prisma.$artistsPayload<ExtArgs>
        fields: Prisma.artistsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.artistsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.artistsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          findFirst: {
            args: Prisma.artistsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.artistsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          findMany: {
            args: Prisma.artistsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>[]
          }
          create: {
            args: Prisma.artistsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          createMany: {
            args: Prisma.artistsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.artistsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          update: {
            args: Prisma.artistsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          deleteMany: {
            args: Prisma.artistsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.artistsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.artistsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$artistsPayload>
          }
          aggregate: {
            args: Prisma.ArtistsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtists>
          }
          groupBy: {
            args: Prisma.artistsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtistsGroupByOutputType>[]
          }
          count: {
            args: Prisma.artistsCountArgs<ExtArgs>
            result: $Utils.Optional<ArtistsCountAggregateOutputType> | number
          }
        }
      }
      songs: {
        payload: Prisma.$songsPayload<ExtArgs>
        fields: Prisma.songsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.songsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.songsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          findFirst: {
            args: Prisma.songsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.songsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          findMany: {
            args: Prisma.songsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>[]
          }
          create: {
            args: Prisma.songsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          createMany: {
            args: Prisma.songsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.songsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          update: {
            args: Prisma.songsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          deleteMany: {
            args: Prisma.songsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.songsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.songsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$songsPayload>
          }
          aggregate: {
            args: Prisma.SongsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSongs>
          }
          groupBy: {
            args: Prisma.songsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SongsGroupByOutputType>[]
          }
          count: {
            args: Prisma.songsCountArgs<ExtArgs>
            result: $Utils.Optional<SongsCountAggregateOutputType> | number
          }
        }
      }
      voters: {
        payload: Prisma.$votersPayload<ExtArgs>
        fields: Prisma.votersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.votersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.votersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          findFirst: {
            args: Prisma.votersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.votersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          findMany: {
            args: Prisma.votersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>[]
          }
          create: {
            args: Prisma.votersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          createMany: {
            args: Prisma.votersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.votersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          update: {
            args: Prisma.votersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          deleteMany: {
            args: Prisma.votersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.votersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.votersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votersPayload>
          }
          aggregate: {
            args: Prisma.VotersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoters>
          }
          groupBy: {
            args: Prisma.votersGroupByArgs<ExtArgs>
            result: $Utils.Optional<VotersGroupByOutputType>[]
          }
          count: {
            args: Prisma.votersCountArgs<ExtArgs>
            result: $Utils.Optional<VotersCountAggregateOutputType> | number
          }
        }
      }
      votes: {
        payload: Prisma.$votesPayload<ExtArgs>
        fields: Prisma.votesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.votesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.votesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          findFirst: {
            args: Prisma.votesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.votesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          findMany: {
            args: Prisma.votesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>[]
          }
          create: {
            args: Prisma.votesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          createMany: {
            args: Prisma.votesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.votesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          update: {
            args: Prisma.votesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          deleteMany: {
            args: Prisma.votesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.votesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.votesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$votesPayload>
          }
          aggregate: {
            args: Prisma.VotesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVotes>
          }
          groupBy: {
            args: Prisma.votesGroupByArgs<ExtArgs>
            result: $Utils.Optional<VotesGroupByOutputType>[]
          }
          count: {
            args: Prisma.votesCountArgs<ExtArgs>
            result: $Utils.Optional<VotesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    artists?: artistsOmit
    songs?: songsOmit
    voters?: votersOmit
    votes?: votesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArtistsCountOutputType
   */

  export type ArtistsCountOutputType = {
    songs: number
  }

  export type ArtistsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songs?: boolean | ArtistsCountOutputTypeCountSongsArgs
  }

  // Custom InputTypes
  /**
   * ArtistsCountOutputType without action
   */
  export type ArtistsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtistsCountOutputType
     */
    select?: ArtistsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtistsCountOutputType without action
   */
  export type ArtistsCountOutputTypeCountSongsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: songsWhereInput
  }


  /**
   * Count Type SongsCountOutputType
   */

  export type SongsCountOutputType = {
    votes: number
  }

  export type SongsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | SongsCountOutputTypeCountVotesArgs
  }

  // Custom InputTypes
  /**
   * SongsCountOutputType without action
   */
  export type SongsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongsCountOutputType
     */
    select?: SongsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SongsCountOutputType without action
   */
  export type SongsCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: votesWhereInput
  }


  /**
   * Count Type VotersCountOutputType
   */

  export type VotersCountOutputType = {
    votes: number
  }

  export type VotersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | VotersCountOutputTypeCountVotesArgs
  }

  // Custom InputTypes
  /**
   * VotersCountOutputType without action
   */
  export type VotersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotersCountOutputType
     */
    select?: VotersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VotersCountOutputType without action
   */
  export type VotersCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: votesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model artists
   */

  export type AggregateArtists = {
    _count: ArtistsCountAggregateOutputType | null
    _avg: ArtistsAvgAggregateOutputType | null
    _sum: ArtistsSumAggregateOutputType | null
    _min: ArtistsMinAggregateOutputType | null
    _max: ArtistsMaxAggregateOutputType | null
  }

  export type ArtistsAvgAggregateOutputType = {
    artist_id: number | null
  }

  export type ArtistsSumAggregateOutputType = {
    artist_id: number | null
  }

  export type ArtistsMinAggregateOutputType = {
    artist_id: number | null
    name: string | null
  }

  export type ArtistsMaxAggregateOutputType = {
    artist_id: number | null
    name: string | null
  }

  export type ArtistsCountAggregateOutputType = {
    artist_id: number
    name: number
    _all: number
  }


  export type ArtistsAvgAggregateInputType = {
    artist_id?: true
  }

  export type ArtistsSumAggregateInputType = {
    artist_id?: true
  }

  export type ArtistsMinAggregateInputType = {
    artist_id?: true
    name?: true
  }

  export type ArtistsMaxAggregateInputType = {
    artist_id?: true
    name?: true
  }

  export type ArtistsCountAggregateInputType = {
    artist_id?: true
    name?: true
    _all?: true
  }

  export type ArtistsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artists to aggregate.
     */
    where?: artistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistsOrderByWithRelationInput | artistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: artistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned artists
    **/
    _count?: true | ArtistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtistsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtistsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistsMaxAggregateInputType
  }

  export type GetArtistsAggregateType<T extends ArtistsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtists[P]>
      : GetScalarType<T[P], AggregateArtists[P]>
  }




  export type artistsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: artistsWhereInput
    orderBy?: artistsOrderByWithAggregationInput | artistsOrderByWithAggregationInput[]
    by: ArtistsScalarFieldEnum[] | ArtistsScalarFieldEnum
    having?: artistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistsCountAggregateInputType | true
    _avg?: ArtistsAvgAggregateInputType
    _sum?: ArtistsSumAggregateInputType
    _min?: ArtistsMinAggregateInputType
    _max?: ArtistsMaxAggregateInputType
  }

  export type ArtistsGroupByOutputType = {
    artist_id: number
    name: string
    _count: ArtistsCountAggregateOutputType | null
    _avg: ArtistsAvgAggregateOutputType | null
    _sum: ArtistsSumAggregateOutputType | null
    _min: ArtistsMinAggregateOutputType | null
    _max: ArtistsMaxAggregateOutputType | null
  }

  type GetArtistsGroupByPayload<T extends artistsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistsGroupByOutputType[P]>
        }
      >
    >


  export type artistsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    artist_id?: boolean
    name?: boolean
    songs?: boolean | artists$songsArgs<ExtArgs>
    _count?: boolean | ArtistsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artists"]>



  export type artistsSelectScalar = {
    artist_id?: boolean
    name?: boolean
  }

  export type artistsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"artist_id" | "name", ExtArgs["result"]["artists"]>
  export type artistsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songs?: boolean | artists$songsArgs<ExtArgs>
    _count?: boolean | ArtistsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $artistsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "artists"
    objects: {
      songs: Prisma.$songsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      artist_id: number
      name: string
    }, ExtArgs["result"]["artists"]>
    composites: {}
  }

  type artistsGetPayload<S extends boolean | null | undefined | artistsDefaultArgs> = $Result.GetResult<Prisma.$artistsPayload, S>

  type artistsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<artistsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtistsCountAggregateInputType | true
    }

  export interface artistsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['artists'], meta: { name: 'artists' } }
    /**
     * Find zero or one Artists that matches the filter.
     * @param {artistsFindUniqueArgs} args - Arguments to find a Artists
     * @example
     * // Get one Artists
     * const artists = await prisma.artists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends artistsFindUniqueArgs>(args: SelectSubset<T, artistsFindUniqueArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Artists that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {artistsFindUniqueOrThrowArgs} args - Arguments to find a Artists
     * @example
     * // Get one Artists
     * const artists = await prisma.artists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends artistsFindUniqueOrThrowArgs>(args: SelectSubset<T, artistsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Artists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsFindFirstArgs} args - Arguments to find a Artists
     * @example
     * // Get one Artists
     * const artists = await prisma.artists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends artistsFindFirstArgs>(args?: SelectSubset<T, artistsFindFirstArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Artists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsFindFirstOrThrowArgs} args - Arguments to find a Artists
     * @example
     * // Get one Artists
     * const artists = await prisma.artists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends artistsFindFirstOrThrowArgs>(args?: SelectSubset<T, artistsFindFirstOrThrowArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Artists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artists
     * const artists = await prisma.artists.findMany()
     * 
     * // Get first 10 Artists
     * const artists = await prisma.artists.findMany({ take: 10 })
     * 
     * // Only select the `artist_id`
     * const artistsWithArtist_idOnly = await prisma.artists.findMany({ select: { artist_id: true } })
     * 
     */
    findMany<T extends artistsFindManyArgs>(args?: SelectSubset<T, artistsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Artists.
     * @param {artistsCreateArgs} args - Arguments to create a Artists.
     * @example
     * // Create one Artists
     * const Artists = await prisma.artists.create({
     *   data: {
     *     // ... data to create a Artists
     *   }
     * })
     * 
     */
    create<T extends artistsCreateArgs>(args: SelectSubset<T, artistsCreateArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Artists.
     * @param {artistsCreateManyArgs} args - Arguments to create many Artists.
     * @example
     * // Create many Artists
     * const artists = await prisma.artists.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends artistsCreateManyArgs>(args?: SelectSubset<T, artistsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Artists.
     * @param {artistsDeleteArgs} args - Arguments to delete one Artists.
     * @example
     * // Delete one Artists
     * const Artists = await prisma.artists.delete({
     *   where: {
     *     // ... filter to delete one Artists
     *   }
     * })
     * 
     */
    delete<T extends artistsDeleteArgs>(args: SelectSubset<T, artistsDeleteArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Artists.
     * @param {artistsUpdateArgs} args - Arguments to update one Artists.
     * @example
     * // Update one Artists
     * const artists = await prisma.artists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends artistsUpdateArgs>(args: SelectSubset<T, artistsUpdateArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Artists.
     * @param {artistsDeleteManyArgs} args - Arguments to filter Artists to delete.
     * @example
     * // Delete a few Artists
     * const { count } = await prisma.artists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends artistsDeleteManyArgs>(args?: SelectSubset<T, artistsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artists
     * const artists = await prisma.artists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends artistsUpdateManyArgs>(args: SelectSubset<T, artistsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artists.
     * @param {artistsUpsertArgs} args - Arguments to update or create a Artists.
     * @example
     * // Update or create a Artists
     * const artists = await prisma.artists.upsert({
     *   create: {
     *     // ... data to create a Artists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artists we want to update
     *   }
     * })
     */
    upsert<T extends artistsUpsertArgs>(args: SelectSubset<T, artistsUpsertArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsCountArgs} args - Arguments to filter Artists to count.
     * @example
     * // Count the number of Artists
     * const count = await prisma.artists.count({
     *   where: {
     *     // ... the filter for the Artists we want to count
     *   }
     * })
    **/
    count<T extends artistsCountArgs>(
      args?: Subset<T, artistsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistsAggregateArgs>(args: Subset<T, ArtistsAggregateArgs>): Prisma.PrismaPromise<GetArtistsAggregateType<T>>

    /**
     * Group by Artists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {artistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends artistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: artistsGroupByArgs['orderBy'] }
        : { orderBy?: artistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, artistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the artists model
   */
  readonly fields: artistsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for artists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__artistsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    songs<T extends artists$songsArgs<ExtArgs> = {}>(args?: Subset<T, artists$songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the artists model
   */ 
  interface artistsFieldRefs {
    readonly artist_id: FieldRef<"artists", 'Int'>
    readonly name: FieldRef<"artists", 'String'>
  }
    

  // Custom InputTypes
  /**
   * artists findUnique
   */
  export type artistsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where: artistsWhereUniqueInput
  }

  /**
   * artists findUniqueOrThrow
   */
  export type artistsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where: artistsWhereUniqueInput
  }

  /**
   * artists findFirst
   */
  export type artistsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where?: artistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistsOrderByWithRelationInput | artistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artists.
     */
    cursor?: artistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artists.
     */
    distinct?: ArtistsScalarFieldEnum | ArtistsScalarFieldEnum[]
  }

  /**
   * artists findFirstOrThrow
   */
  export type artistsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where?: artistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistsOrderByWithRelationInput | artistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for artists.
     */
    cursor?: artistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of artists.
     */
    distinct?: ArtistsScalarFieldEnum | ArtistsScalarFieldEnum[]
  }

  /**
   * artists findMany
   */
  export type artistsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter, which artists to fetch.
     */
    where?: artistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of artists to fetch.
     */
    orderBy?: artistsOrderByWithRelationInput | artistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing artists.
     */
    cursor?: artistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` artists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` artists.
     */
    skip?: number
    distinct?: ArtistsScalarFieldEnum | ArtistsScalarFieldEnum[]
  }

  /**
   * artists create
   */
  export type artistsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * The data needed to create a artists.
     */
    data: XOR<artistsCreateInput, artistsUncheckedCreateInput>
  }

  /**
   * artists createMany
   */
  export type artistsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many artists.
     */
    data: artistsCreateManyInput | artistsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * artists update
   */
  export type artistsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * The data needed to update a artists.
     */
    data: XOR<artistsUpdateInput, artistsUncheckedUpdateInput>
    /**
     * Choose, which artists to update.
     */
    where: artistsWhereUniqueInput
  }

  /**
   * artists updateMany
   */
  export type artistsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update artists.
     */
    data: XOR<artistsUpdateManyMutationInput, artistsUncheckedUpdateManyInput>
    /**
     * Filter which artists to update
     */
    where?: artistsWhereInput
    /**
     * Limit how many artists to update.
     */
    limit?: number
  }

  /**
   * artists upsert
   */
  export type artistsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * The filter to search for the artists to update in case it exists.
     */
    where: artistsWhereUniqueInput
    /**
     * In case the artists found by the `where` argument doesn't exist, create a new artists with this data.
     */
    create: XOR<artistsCreateInput, artistsUncheckedCreateInput>
    /**
     * In case the artists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<artistsUpdateInput, artistsUncheckedUpdateInput>
  }

  /**
   * artists delete
   */
  export type artistsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    /**
     * Filter which artists to delete.
     */
    where: artistsWhereUniqueInput
  }

  /**
   * artists deleteMany
   */
  export type artistsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which artists to delete
     */
    where?: artistsWhereInput
    /**
     * Limit how many artists to delete.
     */
    limit?: number
  }

  /**
   * artists.songs
   */
  export type artists$songsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    where?: songsWhereInput
    orderBy?: songsOrderByWithRelationInput | songsOrderByWithRelationInput[]
    cursor?: songsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SongsScalarFieldEnum | SongsScalarFieldEnum[]
  }

  /**
   * artists without action
   */
  export type artistsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
  }


  /**
   * Model songs
   */

  export type AggregateSongs = {
    _count: SongsCountAggregateOutputType | null
    _avg: SongsAvgAggregateOutputType | null
    _sum: SongsSumAggregateOutputType | null
    _min: SongsMinAggregateOutputType | null
    _max: SongsMaxAggregateOutputType | null
  }

  export type SongsAvgAggregateOutputType = {
    song_id: number | null
    artist_id: number | null
  }

  export type SongsSumAggregateOutputType = {
    song_id: number | null
    artist_id: number | null
  }

  export type SongsMinAggregateOutputType = {
    song_id: number | null
    name: string | null
    artist_id: number | null
  }

  export type SongsMaxAggregateOutputType = {
    song_id: number | null
    name: string | null
    artist_id: number | null
  }

  export type SongsCountAggregateOutputType = {
    song_id: number
    name: number
    artist_id: number
    _all: number
  }


  export type SongsAvgAggregateInputType = {
    song_id?: true
    artist_id?: true
  }

  export type SongsSumAggregateInputType = {
    song_id?: true
    artist_id?: true
  }

  export type SongsMinAggregateInputType = {
    song_id?: true
    name?: true
    artist_id?: true
  }

  export type SongsMaxAggregateInputType = {
    song_id?: true
    name?: true
    artist_id?: true
  }

  export type SongsCountAggregateInputType = {
    song_id?: true
    name?: true
    artist_id?: true
    _all?: true
  }

  export type SongsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which songs to aggregate.
     */
    where?: songsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of songs to fetch.
     */
    orderBy?: songsOrderByWithRelationInput | songsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: songsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned songs
    **/
    _count?: true | SongsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SongsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SongsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongsMaxAggregateInputType
  }

  export type GetSongsAggregateType<T extends SongsAggregateArgs> = {
        [P in keyof T & keyof AggregateSongs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSongs[P]>
      : GetScalarType<T[P], AggregateSongs[P]>
  }




  export type songsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: songsWhereInput
    orderBy?: songsOrderByWithAggregationInput | songsOrderByWithAggregationInput[]
    by: SongsScalarFieldEnum[] | SongsScalarFieldEnum
    having?: songsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongsCountAggregateInputType | true
    _avg?: SongsAvgAggregateInputType
    _sum?: SongsSumAggregateInputType
    _min?: SongsMinAggregateInputType
    _max?: SongsMaxAggregateInputType
  }

  export type SongsGroupByOutputType = {
    song_id: number
    name: string
    artist_id: number | null
    _count: SongsCountAggregateOutputType | null
    _avg: SongsAvgAggregateOutputType | null
    _sum: SongsSumAggregateOutputType | null
    _min: SongsMinAggregateOutputType | null
    _max: SongsMaxAggregateOutputType | null
  }

  type GetSongsGroupByPayload<T extends songsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SongsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SongsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SongsGroupByOutputType[P]>
            : GetScalarType<T[P], SongsGroupByOutputType[P]>
        }
      >
    >


  export type songsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    song_id?: boolean
    name?: boolean
    artist_id?: boolean
    artists?: boolean | songs$artistsArgs<ExtArgs>
    votes?: boolean | songs$votesArgs<ExtArgs>
    _count?: boolean | SongsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["songs"]>



  export type songsSelectScalar = {
    song_id?: boolean
    name?: boolean
    artist_id?: boolean
  }

  export type songsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"song_id" | "name" | "artist_id", ExtArgs["result"]["songs"]>
  export type songsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artists?: boolean | songs$artistsArgs<ExtArgs>
    votes?: boolean | songs$votesArgs<ExtArgs>
    _count?: boolean | SongsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $songsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "songs"
    objects: {
      artists: Prisma.$artistsPayload<ExtArgs> | null
      votes: Prisma.$votesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      song_id: number
      name: string
      artist_id: number | null
    }, ExtArgs["result"]["songs"]>
    composites: {}
  }

  type songsGetPayload<S extends boolean | null | undefined | songsDefaultArgs> = $Result.GetResult<Prisma.$songsPayload, S>

  type songsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<songsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SongsCountAggregateInputType | true
    }

  export interface songsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['songs'], meta: { name: 'songs' } }
    /**
     * Find zero or one Songs that matches the filter.
     * @param {songsFindUniqueArgs} args - Arguments to find a Songs
     * @example
     * // Get one Songs
     * const songs = await prisma.songs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends songsFindUniqueArgs>(args: SelectSubset<T, songsFindUniqueArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Songs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {songsFindUniqueOrThrowArgs} args - Arguments to find a Songs
     * @example
     * // Get one Songs
     * const songs = await prisma.songs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends songsFindUniqueOrThrowArgs>(args: SelectSubset<T, songsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsFindFirstArgs} args - Arguments to find a Songs
     * @example
     * // Get one Songs
     * const songs = await prisma.songs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends songsFindFirstArgs>(args?: SelectSubset<T, songsFindFirstArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Songs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsFindFirstOrThrowArgs} args - Arguments to find a Songs
     * @example
     * // Get one Songs
     * const songs = await prisma.songs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends songsFindFirstOrThrowArgs>(args?: SelectSubset<T, songsFindFirstOrThrowArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Songs
     * const songs = await prisma.songs.findMany()
     * 
     * // Get first 10 Songs
     * const songs = await prisma.songs.findMany({ take: 10 })
     * 
     * // Only select the `song_id`
     * const songsWithSong_idOnly = await prisma.songs.findMany({ select: { song_id: true } })
     * 
     */
    findMany<T extends songsFindManyArgs>(args?: SelectSubset<T, songsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Songs.
     * @param {songsCreateArgs} args - Arguments to create a Songs.
     * @example
     * // Create one Songs
     * const Songs = await prisma.songs.create({
     *   data: {
     *     // ... data to create a Songs
     *   }
     * })
     * 
     */
    create<T extends songsCreateArgs>(args: SelectSubset<T, songsCreateArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Songs.
     * @param {songsCreateManyArgs} args - Arguments to create many Songs.
     * @example
     * // Create many Songs
     * const songs = await prisma.songs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends songsCreateManyArgs>(args?: SelectSubset<T, songsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Songs.
     * @param {songsDeleteArgs} args - Arguments to delete one Songs.
     * @example
     * // Delete one Songs
     * const Songs = await prisma.songs.delete({
     *   where: {
     *     // ... filter to delete one Songs
     *   }
     * })
     * 
     */
    delete<T extends songsDeleteArgs>(args: SelectSubset<T, songsDeleteArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Songs.
     * @param {songsUpdateArgs} args - Arguments to update one Songs.
     * @example
     * // Update one Songs
     * const songs = await prisma.songs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends songsUpdateArgs>(args: SelectSubset<T, songsUpdateArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Songs.
     * @param {songsDeleteManyArgs} args - Arguments to filter Songs to delete.
     * @example
     * // Delete a few Songs
     * const { count } = await prisma.songs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends songsDeleteManyArgs>(args?: SelectSubset<T, songsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Songs
     * const songs = await prisma.songs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends songsUpdateManyArgs>(args: SelectSubset<T, songsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Songs.
     * @param {songsUpsertArgs} args - Arguments to update or create a Songs.
     * @example
     * // Update or create a Songs
     * const songs = await prisma.songs.upsert({
     *   create: {
     *     // ... data to create a Songs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Songs we want to update
     *   }
     * })
     */
    upsert<T extends songsUpsertArgs>(args: SelectSubset<T, songsUpsertArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsCountArgs} args - Arguments to filter Songs to count.
     * @example
     * // Count the number of Songs
     * const count = await prisma.songs.count({
     *   where: {
     *     // ... the filter for the Songs we want to count
     *   }
     * })
    **/
    count<T extends songsCountArgs>(
      args?: Subset<T, songsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongsAggregateArgs>(args: Subset<T, SongsAggregateArgs>): Prisma.PrismaPromise<GetSongsAggregateType<T>>

    /**
     * Group by Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {songsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends songsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: songsGroupByArgs['orderBy'] }
        : { orderBy?: songsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, songsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the songs model
   */
  readonly fields: songsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for songs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__songsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    artists<T extends songs$artistsArgs<ExtArgs> = {}>(args?: Subset<T, songs$artistsArgs<ExtArgs>>): Prisma__artistsClient<$Result.GetResult<Prisma.$artistsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    votes<T extends songs$votesArgs<ExtArgs> = {}>(args?: Subset<T, songs$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the songs model
   */ 
  interface songsFieldRefs {
    readonly song_id: FieldRef<"songs", 'Int'>
    readonly name: FieldRef<"songs", 'String'>
    readonly artist_id: FieldRef<"songs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * songs findUnique
   */
  export type songsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter, which songs to fetch.
     */
    where: songsWhereUniqueInput
  }

  /**
   * songs findUniqueOrThrow
   */
  export type songsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter, which songs to fetch.
     */
    where: songsWhereUniqueInput
  }

  /**
   * songs findFirst
   */
  export type songsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter, which songs to fetch.
     */
    where?: songsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of songs to fetch.
     */
    orderBy?: songsOrderByWithRelationInput | songsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for songs.
     */
    cursor?: songsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of songs.
     */
    distinct?: SongsScalarFieldEnum | SongsScalarFieldEnum[]
  }

  /**
   * songs findFirstOrThrow
   */
  export type songsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter, which songs to fetch.
     */
    where?: songsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of songs to fetch.
     */
    orderBy?: songsOrderByWithRelationInput | songsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for songs.
     */
    cursor?: songsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of songs.
     */
    distinct?: SongsScalarFieldEnum | SongsScalarFieldEnum[]
  }

  /**
   * songs findMany
   */
  export type songsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter, which songs to fetch.
     */
    where?: songsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of songs to fetch.
     */
    orderBy?: songsOrderByWithRelationInput | songsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing songs.
     */
    cursor?: songsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` songs.
     */
    skip?: number
    distinct?: SongsScalarFieldEnum | SongsScalarFieldEnum[]
  }

  /**
   * songs create
   */
  export type songsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * The data needed to create a songs.
     */
    data: XOR<songsCreateInput, songsUncheckedCreateInput>
  }

  /**
   * songs createMany
   */
  export type songsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many songs.
     */
    data: songsCreateManyInput | songsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * songs update
   */
  export type songsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * The data needed to update a songs.
     */
    data: XOR<songsUpdateInput, songsUncheckedUpdateInput>
    /**
     * Choose, which songs to update.
     */
    where: songsWhereUniqueInput
  }

  /**
   * songs updateMany
   */
  export type songsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update songs.
     */
    data: XOR<songsUpdateManyMutationInput, songsUncheckedUpdateManyInput>
    /**
     * Filter which songs to update
     */
    where?: songsWhereInput
    /**
     * Limit how many songs to update.
     */
    limit?: number
  }

  /**
   * songs upsert
   */
  export type songsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * The filter to search for the songs to update in case it exists.
     */
    where: songsWhereUniqueInput
    /**
     * In case the songs found by the `where` argument doesn't exist, create a new songs with this data.
     */
    create: XOR<songsCreateInput, songsUncheckedCreateInput>
    /**
     * In case the songs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<songsUpdateInput, songsUncheckedUpdateInput>
  }

  /**
   * songs delete
   */
  export type songsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    /**
     * Filter which songs to delete.
     */
    where: songsWhereUniqueInput
  }

  /**
   * songs deleteMany
   */
  export type songsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which songs to delete
     */
    where?: songsWhereInput
    /**
     * Limit how many songs to delete.
     */
    limit?: number
  }

  /**
   * songs.artists
   */
  export type songs$artistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the artists
     */
    select?: artistsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the artists
     */
    omit?: artistsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: artistsInclude<ExtArgs> | null
    where?: artistsWhereInput
  }

  /**
   * songs.votes
   */
  export type songs$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    where?: votesWhereInput
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    cursor?: votesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VotesScalarFieldEnum | VotesScalarFieldEnum[]
  }

  /**
   * songs without action
   */
  export type songsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
  }


  /**
   * Model voters
   */

  export type AggregateVoters = {
    _count: VotersCountAggregateOutputType | null
    _avg: VotersAvgAggregateOutputType | null
    _sum: VotersSumAggregateOutputType | null
    _min: VotersMinAggregateOutputType | null
    _max: VotersMaxAggregateOutputType | null
  }

  export type VotersAvgAggregateOutputType = {
    voter_id: number | null
  }

  export type VotersSumAggregateOutputType = {
    voter_id: number | null
  }

  export type VotersMinAggregateOutputType = {
    voter_id: number | null
    name: string | null
  }

  export type VotersMaxAggregateOutputType = {
    voter_id: number | null
    name: string | null
  }

  export type VotersCountAggregateOutputType = {
    voter_id: number
    name: number
    _all: number
  }


  export type VotersAvgAggregateInputType = {
    voter_id?: true
  }

  export type VotersSumAggregateInputType = {
    voter_id?: true
  }

  export type VotersMinAggregateInputType = {
    voter_id?: true
    name?: true
  }

  export type VotersMaxAggregateInputType = {
    voter_id?: true
    name?: true
  }

  export type VotersCountAggregateInputType = {
    voter_id?: true
    name?: true
    _all?: true
  }

  export type VotersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voters to aggregate.
     */
    where?: votersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voters to fetch.
     */
    orderBy?: votersOrderByWithRelationInput | votersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: votersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned voters
    **/
    _count?: true | VotersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotersMaxAggregateInputType
  }

  export type GetVotersAggregateType<T extends VotersAggregateArgs> = {
        [P in keyof T & keyof AggregateVoters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoters[P]>
      : GetScalarType<T[P], AggregateVoters[P]>
  }




  export type votersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: votersWhereInput
    orderBy?: votersOrderByWithAggregationInput | votersOrderByWithAggregationInput[]
    by: VotersScalarFieldEnum[] | VotersScalarFieldEnum
    having?: votersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotersCountAggregateInputType | true
    _avg?: VotersAvgAggregateInputType
    _sum?: VotersSumAggregateInputType
    _min?: VotersMinAggregateInputType
    _max?: VotersMaxAggregateInputType
  }

  export type VotersGroupByOutputType = {
    voter_id: number
    name: string
    _count: VotersCountAggregateOutputType | null
    _avg: VotersAvgAggregateOutputType | null
    _sum: VotersSumAggregateOutputType | null
    _min: VotersMinAggregateOutputType | null
    _max: VotersMaxAggregateOutputType | null
  }

  type GetVotersGroupByPayload<T extends votersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VotersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotersGroupByOutputType[P]>
            : GetScalarType<T[P], VotersGroupByOutputType[P]>
        }
      >
    >


  export type votersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voter_id?: boolean
    name?: boolean
    votes?: boolean | voters$votesArgs<ExtArgs>
    _count?: boolean | VotersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voters"]>



  export type votersSelectScalar = {
    voter_id?: boolean
    name?: boolean
  }

  export type votersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"voter_id" | "name", ExtArgs["result"]["voters"]>
  export type votersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | voters$votesArgs<ExtArgs>
    _count?: boolean | VotersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $votersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "voters"
    objects: {
      votes: Prisma.$votesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      voter_id: number
      name: string
    }, ExtArgs["result"]["voters"]>
    composites: {}
  }

  type votersGetPayload<S extends boolean | null | undefined | votersDefaultArgs> = $Result.GetResult<Prisma.$votersPayload, S>

  type votersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<votersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VotersCountAggregateInputType | true
    }

  export interface votersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['voters'], meta: { name: 'voters' } }
    /**
     * Find zero or one Voters that matches the filter.
     * @param {votersFindUniqueArgs} args - Arguments to find a Voters
     * @example
     * // Get one Voters
     * const voters = await prisma.voters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends votersFindUniqueArgs>(args: SelectSubset<T, votersFindUniqueArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Voters that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {votersFindUniqueOrThrowArgs} args - Arguments to find a Voters
     * @example
     * // Get one Voters
     * const voters = await prisma.voters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends votersFindUniqueOrThrowArgs>(args: SelectSubset<T, votersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Voters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersFindFirstArgs} args - Arguments to find a Voters
     * @example
     * // Get one Voters
     * const voters = await prisma.voters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends votersFindFirstArgs>(args?: SelectSubset<T, votersFindFirstArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Voters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersFindFirstOrThrowArgs} args - Arguments to find a Voters
     * @example
     * // Get one Voters
     * const voters = await prisma.voters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends votersFindFirstOrThrowArgs>(args?: SelectSubset<T, votersFindFirstOrThrowArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Voters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Voters
     * const voters = await prisma.voters.findMany()
     * 
     * // Get first 10 Voters
     * const voters = await prisma.voters.findMany({ take: 10 })
     * 
     * // Only select the `voter_id`
     * const votersWithVoter_idOnly = await prisma.voters.findMany({ select: { voter_id: true } })
     * 
     */
    findMany<T extends votersFindManyArgs>(args?: SelectSubset<T, votersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Voters.
     * @param {votersCreateArgs} args - Arguments to create a Voters.
     * @example
     * // Create one Voters
     * const Voters = await prisma.voters.create({
     *   data: {
     *     // ... data to create a Voters
     *   }
     * })
     * 
     */
    create<T extends votersCreateArgs>(args: SelectSubset<T, votersCreateArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Voters.
     * @param {votersCreateManyArgs} args - Arguments to create many Voters.
     * @example
     * // Create many Voters
     * const voters = await prisma.voters.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends votersCreateManyArgs>(args?: SelectSubset<T, votersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Voters.
     * @param {votersDeleteArgs} args - Arguments to delete one Voters.
     * @example
     * // Delete one Voters
     * const Voters = await prisma.voters.delete({
     *   where: {
     *     // ... filter to delete one Voters
     *   }
     * })
     * 
     */
    delete<T extends votersDeleteArgs>(args: SelectSubset<T, votersDeleteArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Voters.
     * @param {votersUpdateArgs} args - Arguments to update one Voters.
     * @example
     * // Update one Voters
     * const voters = await prisma.voters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends votersUpdateArgs>(args: SelectSubset<T, votersUpdateArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Voters.
     * @param {votersDeleteManyArgs} args - Arguments to filter Voters to delete.
     * @example
     * // Delete a few Voters
     * const { count } = await prisma.voters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends votersDeleteManyArgs>(args?: SelectSubset<T, votersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Voters
     * const voters = await prisma.voters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends votersUpdateManyArgs>(args: SelectSubset<T, votersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Voters.
     * @param {votersUpsertArgs} args - Arguments to update or create a Voters.
     * @example
     * // Update or create a Voters
     * const voters = await prisma.voters.upsert({
     *   create: {
     *     // ... data to create a Voters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voters we want to update
     *   }
     * })
     */
    upsert<T extends votersUpsertArgs>(args: SelectSubset<T, votersUpsertArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Voters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersCountArgs} args - Arguments to filter Voters to count.
     * @example
     * // Count the number of Voters
     * const count = await prisma.voters.count({
     *   where: {
     *     // ... the filter for the Voters we want to count
     *   }
     * })
    **/
    count<T extends votersCountArgs>(
      args?: Subset<T, votersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotersAggregateArgs>(args: Subset<T, VotersAggregateArgs>): Prisma.PrismaPromise<GetVotersAggregateType<T>>

    /**
     * Group by Voters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends votersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: votersGroupByArgs['orderBy'] }
        : { orderBy?: votersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, votersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the voters model
   */
  readonly fields: votersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for voters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__votersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    votes<T extends voters$votesArgs<ExtArgs> = {}>(args?: Subset<T, voters$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the voters model
   */ 
  interface votersFieldRefs {
    readonly voter_id: FieldRef<"voters", 'Int'>
    readonly name: FieldRef<"voters", 'String'>
  }
    

  // Custom InputTypes
  /**
   * voters findUnique
   */
  export type votersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter, which voters to fetch.
     */
    where: votersWhereUniqueInput
  }

  /**
   * voters findUniqueOrThrow
   */
  export type votersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter, which voters to fetch.
     */
    where: votersWhereUniqueInput
  }

  /**
   * voters findFirst
   */
  export type votersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter, which voters to fetch.
     */
    where?: votersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voters to fetch.
     */
    orderBy?: votersOrderByWithRelationInput | votersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voters.
     */
    cursor?: votersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voters.
     */
    distinct?: VotersScalarFieldEnum | VotersScalarFieldEnum[]
  }

  /**
   * voters findFirstOrThrow
   */
  export type votersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter, which voters to fetch.
     */
    where?: votersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voters to fetch.
     */
    orderBy?: votersOrderByWithRelationInput | votersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voters.
     */
    cursor?: votersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voters.
     */
    distinct?: VotersScalarFieldEnum | VotersScalarFieldEnum[]
  }

  /**
   * voters findMany
   */
  export type votersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter, which voters to fetch.
     */
    where?: votersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voters to fetch.
     */
    orderBy?: votersOrderByWithRelationInput | votersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing voters.
     */
    cursor?: votersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voters.
     */
    skip?: number
    distinct?: VotersScalarFieldEnum | VotersScalarFieldEnum[]
  }

  /**
   * voters create
   */
  export type votersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * The data needed to create a voters.
     */
    data: XOR<votersCreateInput, votersUncheckedCreateInput>
  }

  /**
   * voters createMany
   */
  export type votersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many voters.
     */
    data: votersCreateManyInput | votersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * voters update
   */
  export type votersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * The data needed to update a voters.
     */
    data: XOR<votersUpdateInput, votersUncheckedUpdateInput>
    /**
     * Choose, which voters to update.
     */
    where: votersWhereUniqueInput
  }

  /**
   * voters updateMany
   */
  export type votersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update voters.
     */
    data: XOR<votersUpdateManyMutationInput, votersUncheckedUpdateManyInput>
    /**
     * Filter which voters to update
     */
    where?: votersWhereInput
    /**
     * Limit how many voters to update.
     */
    limit?: number
  }

  /**
   * voters upsert
   */
  export type votersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * The filter to search for the voters to update in case it exists.
     */
    where: votersWhereUniqueInput
    /**
     * In case the voters found by the `where` argument doesn't exist, create a new voters with this data.
     */
    create: XOR<votersCreateInput, votersUncheckedCreateInput>
    /**
     * In case the voters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<votersUpdateInput, votersUncheckedUpdateInput>
  }

  /**
   * voters delete
   */
  export type votersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    /**
     * Filter which voters to delete.
     */
    where: votersWhereUniqueInput
  }

  /**
   * voters deleteMany
   */
  export type votersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voters to delete
     */
    where?: votersWhereInput
    /**
     * Limit how many voters to delete.
     */
    limit?: number
  }

  /**
   * voters.votes
   */
  export type voters$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    where?: votesWhereInput
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    cursor?: votesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VotesScalarFieldEnum | VotesScalarFieldEnum[]
  }

  /**
   * voters without action
   */
  export type votersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
  }


  /**
   * Model votes
   */

  export type AggregateVotes = {
    _count: VotesCountAggregateOutputType | null
    _avg: VotesAvgAggregateOutputType | null
    _sum: VotesSumAggregateOutputType | null
    _min: VotesMinAggregateOutputType | null
    _max: VotesMaxAggregateOutputType | null
  }

  export type VotesAvgAggregateOutputType = {
    vote_id: number | null
    voter_id: number | null
    song_id: number | null
    points: number | null
  }

  export type VotesSumAggregateOutputType = {
    vote_id: number | null
    voter_id: number | null
    song_id: number | null
    points: number | null
  }

  export type VotesMinAggregateOutputType = {
    vote_id: number | null
    voter_id: number | null
    song_id: number | null
    points: number | null
  }

  export type VotesMaxAggregateOutputType = {
    vote_id: number | null
    voter_id: number | null
    song_id: number | null
    points: number | null
  }

  export type VotesCountAggregateOutputType = {
    vote_id: number
    voter_id: number
    song_id: number
    points: number
    _all: number
  }


  export type VotesAvgAggregateInputType = {
    vote_id?: true
    voter_id?: true
    song_id?: true
    points?: true
  }

  export type VotesSumAggregateInputType = {
    vote_id?: true
    voter_id?: true
    song_id?: true
    points?: true
  }

  export type VotesMinAggregateInputType = {
    vote_id?: true
    voter_id?: true
    song_id?: true
    points?: true
  }

  export type VotesMaxAggregateInputType = {
    vote_id?: true
    voter_id?: true
    song_id?: true
    points?: true
  }

  export type VotesCountAggregateInputType = {
    vote_id?: true
    voter_id?: true
    song_id?: true
    points?: true
    _all?: true
  }

  export type VotesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which votes to aggregate.
     */
    where?: votesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     */
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned votes
    **/
    _count?: true | VotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotesMaxAggregateInputType
  }

  export type GetVotesAggregateType<T extends VotesAggregateArgs> = {
        [P in keyof T & keyof AggregateVotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVotes[P]>
      : GetScalarType<T[P], AggregateVotes[P]>
  }




  export type votesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: votesWhereInput
    orderBy?: votesOrderByWithAggregationInput | votesOrderByWithAggregationInput[]
    by: VotesScalarFieldEnum[] | VotesScalarFieldEnum
    having?: votesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotesCountAggregateInputType | true
    _avg?: VotesAvgAggregateInputType
    _sum?: VotesSumAggregateInputType
    _min?: VotesMinAggregateInputType
    _max?: VotesMaxAggregateInputType
  }

  export type VotesGroupByOutputType = {
    vote_id: number
    voter_id: number | null
    song_id: number | null
    points: number | null
    _count: VotesCountAggregateOutputType | null
    _avg: VotesAvgAggregateOutputType | null
    _sum: VotesSumAggregateOutputType | null
    _min: VotesMinAggregateOutputType | null
    _max: VotesMaxAggregateOutputType | null
  }

  type GetVotesGroupByPayload<T extends votesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotesGroupByOutputType[P]>
            : GetScalarType<T[P], VotesGroupByOutputType[P]>
        }
      >
    >


  export type votesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vote_id?: boolean
    voter_id?: boolean
    song_id?: boolean
    points?: boolean
    voters?: boolean | votes$votersArgs<ExtArgs>
    songs?: boolean | votes$songsArgs<ExtArgs>
  }, ExtArgs["result"]["votes"]>



  export type votesSelectScalar = {
    vote_id?: boolean
    voter_id?: boolean
    song_id?: boolean
    points?: boolean
  }

  export type votesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"vote_id" | "voter_id" | "song_id" | "points", ExtArgs["result"]["votes"]>
  export type votesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voters?: boolean | votes$votersArgs<ExtArgs>
    songs?: boolean | votes$songsArgs<ExtArgs>
  }

  export type $votesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "votes"
    objects: {
      voters: Prisma.$votersPayload<ExtArgs> | null
      songs: Prisma.$songsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      vote_id: number
      voter_id: number | null
      song_id: number | null
      points: number | null
    }, ExtArgs["result"]["votes"]>
    composites: {}
  }

  type votesGetPayload<S extends boolean | null | undefined | votesDefaultArgs> = $Result.GetResult<Prisma.$votesPayload, S>

  type votesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<votesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VotesCountAggregateInputType | true
    }

  export interface votesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['votes'], meta: { name: 'votes' } }
    /**
     * Find zero or one Votes that matches the filter.
     * @param {votesFindUniqueArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends votesFindUniqueArgs>(args: SelectSubset<T, votesFindUniqueArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Votes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {votesFindUniqueOrThrowArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends votesFindUniqueOrThrowArgs>(args: SelectSubset<T, votesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesFindFirstArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends votesFindFirstArgs>(args?: SelectSubset<T, votesFindFirstArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Votes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesFindFirstOrThrowArgs} args - Arguments to find a Votes
     * @example
     * // Get one Votes
     * const votes = await prisma.votes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends votesFindFirstOrThrowArgs>(args?: SelectSubset<T, votesFindFirstOrThrowArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.votes.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.votes.findMany({ take: 10 })
     * 
     * // Only select the `vote_id`
     * const votesWithVote_idOnly = await prisma.votes.findMany({ select: { vote_id: true } })
     * 
     */
    findMany<T extends votesFindManyArgs>(args?: SelectSubset<T, votesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Votes.
     * @param {votesCreateArgs} args - Arguments to create a Votes.
     * @example
     * // Create one Votes
     * const Votes = await prisma.votes.create({
     *   data: {
     *     // ... data to create a Votes
     *   }
     * })
     * 
     */
    create<T extends votesCreateArgs>(args: SelectSubset<T, votesCreateArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Votes.
     * @param {votesCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const votes = await prisma.votes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends votesCreateManyArgs>(args?: SelectSubset<T, votesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Votes.
     * @param {votesDeleteArgs} args - Arguments to delete one Votes.
     * @example
     * // Delete one Votes
     * const Votes = await prisma.votes.delete({
     *   where: {
     *     // ... filter to delete one Votes
     *   }
     * })
     * 
     */
    delete<T extends votesDeleteArgs>(args: SelectSubset<T, votesDeleteArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Votes.
     * @param {votesUpdateArgs} args - Arguments to update one Votes.
     * @example
     * // Update one Votes
     * const votes = await prisma.votes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends votesUpdateArgs>(args: SelectSubset<T, votesUpdateArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Votes.
     * @param {votesDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.votes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends votesDeleteManyArgs>(args?: SelectSubset<T, votesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const votes = await prisma.votes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends votesUpdateManyArgs>(args: SelectSubset<T, votesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Votes.
     * @param {votesUpsertArgs} args - Arguments to update or create a Votes.
     * @example
     * // Update or create a Votes
     * const votes = await prisma.votes.upsert({
     *   create: {
     *     // ... data to create a Votes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Votes we want to update
     *   }
     * })
     */
    upsert<T extends votesUpsertArgs>(args: SelectSubset<T, votesUpsertArgs<ExtArgs>>): Prisma__votesClient<$Result.GetResult<Prisma.$votesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.votes.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends votesCountArgs>(
      args?: Subset<T, votesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotesAggregateArgs>(args: Subset<T, VotesAggregateArgs>): Prisma.PrismaPromise<GetVotesAggregateType<T>>

    /**
     * Group by Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {votesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends votesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: votesGroupByArgs['orderBy'] }
        : { orderBy?: votesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, votesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the votes model
   */
  readonly fields: votesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for votes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__votesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    voters<T extends votes$votersArgs<ExtArgs> = {}>(args?: Subset<T, votes$votersArgs<ExtArgs>>): Prisma__votersClient<$Result.GetResult<Prisma.$votersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    songs<T extends votes$songsArgs<ExtArgs> = {}>(args?: Subset<T, votes$songsArgs<ExtArgs>>): Prisma__songsClient<$Result.GetResult<Prisma.$songsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the votes model
   */ 
  interface votesFieldRefs {
    readonly vote_id: FieldRef<"votes", 'Int'>
    readonly voter_id: FieldRef<"votes", 'Int'>
    readonly song_id: FieldRef<"votes", 'Int'>
    readonly points: FieldRef<"votes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * votes findUnique
   */
  export type votesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter, which votes to fetch.
     */
    where: votesWhereUniqueInput
  }

  /**
   * votes findUniqueOrThrow
   */
  export type votesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter, which votes to fetch.
     */
    where: votesWhereUniqueInput
  }

  /**
   * votes findFirst
   */
  export type votesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter, which votes to fetch.
     */
    where?: votesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     */
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votes.
     */
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of votes.
     */
    distinct?: VotesScalarFieldEnum | VotesScalarFieldEnum[]
  }

  /**
   * votes findFirstOrThrow
   */
  export type votesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter, which votes to fetch.
     */
    where?: votesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     */
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for votes.
     */
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of votes.
     */
    distinct?: VotesScalarFieldEnum | VotesScalarFieldEnum[]
  }

  /**
   * votes findMany
   */
  export type votesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter, which votes to fetch.
     */
    where?: votesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of votes to fetch.
     */
    orderBy?: votesOrderByWithRelationInput | votesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing votes.
     */
    cursor?: votesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` votes.
     */
    skip?: number
    distinct?: VotesScalarFieldEnum | VotesScalarFieldEnum[]
  }

  /**
   * votes create
   */
  export type votesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * The data needed to create a votes.
     */
    data?: XOR<votesCreateInput, votesUncheckedCreateInput>
  }

  /**
   * votes createMany
   */
  export type votesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many votes.
     */
    data: votesCreateManyInput | votesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * votes update
   */
  export type votesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * The data needed to update a votes.
     */
    data: XOR<votesUpdateInput, votesUncheckedUpdateInput>
    /**
     * Choose, which votes to update.
     */
    where: votesWhereUniqueInput
  }

  /**
   * votes updateMany
   */
  export type votesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update votes.
     */
    data: XOR<votesUpdateManyMutationInput, votesUncheckedUpdateManyInput>
    /**
     * Filter which votes to update
     */
    where?: votesWhereInput
    /**
     * Limit how many votes to update.
     */
    limit?: number
  }

  /**
   * votes upsert
   */
  export type votesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * The filter to search for the votes to update in case it exists.
     */
    where: votesWhereUniqueInput
    /**
     * In case the votes found by the `where` argument doesn't exist, create a new votes with this data.
     */
    create: XOR<votesCreateInput, votesUncheckedCreateInput>
    /**
     * In case the votes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<votesUpdateInput, votesUncheckedUpdateInput>
  }

  /**
   * votes delete
   */
  export type votesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
    /**
     * Filter which votes to delete.
     */
    where: votesWhereUniqueInput
  }

  /**
   * votes deleteMany
   */
  export type votesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which votes to delete
     */
    where?: votesWhereInput
    /**
     * Limit how many votes to delete.
     */
    limit?: number
  }

  /**
   * votes.voters
   */
  export type votes$votersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voters
     */
    select?: votersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voters
     */
    omit?: votersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votersInclude<ExtArgs> | null
    where?: votersWhereInput
  }

  /**
   * votes.songs
   */
  export type votes$songsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the songs
     */
    select?: songsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the songs
     */
    omit?: songsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: songsInclude<ExtArgs> | null
    where?: songsWhereInput
  }

  /**
   * votes without action
   */
  export type votesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the votes
     */
    select?: votesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the votes
     */
    omit?: votesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: votesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArtistsScalarFieldEnum: {
    artist_id: 'artist_id',
    name: 'name'
  };

  export type ArtistsScalarFieldEnum = (typeof ArtistsScalarFieldEnum)[keyof typeof ArtistsScalarFieldEnum]


  export const SongsScalarFieldEnum: {
    song_id: 'song_id',
    name: 'name',
    artist_id: 'artist_id'
  };

  export type SongsScalarFieldEnum = (typeof SongsScalarFieldEnum)[keyof typeof SongsScalarFieldEnum]


  export const VotersScalarFieldEnum: {
    voter_id: 'voter_id',
    name: 'name'
  };

  export type VotersScalarFieldEnum = (typeof VotersScalarFieldEnum)[keyof typeof VotersScalarFieldEnum]


  export const VotesScalarFieldEnum: {
    vote_id: 'vote_id',
    voter_id: 'voter_id',
    song_id: 'song_id',
    points: 'points'
  };

  export type VotesScalarFieldEnum = (typeof VotesScalarFieldEnum)[keyof typeof VotesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const artistsOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type artistsOrderByRelevanceFieldEnum = (typeof artistsOrderByRelevanceFieldEnum)[keyof typeof artistsOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const songsOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type songsOrderByRelevanceFieldEnum = (typeof songsOrderByRelevanceFieldEnum)[keyof typeof songsOrderByRelevanceFieldEnum]


  export const votersOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type votersOrderByRelevanceFieldEnum = (typeof votersOrderByRelevanceFieldEnum)[keyof typeof votersOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type artistsWhereInput = {
    AND?: artistsWhereInput | artistsWhereInput[]
    OR?: artistsWhereInput[]
    NOT?: artistsWhereInput | artistsWhereInput[]
    artist_id?: IntFilter<"artists"> | number
    name?: StringFilter<"artists"> | string
    songs?: SongsListRelationFilter
  }

  export type artistsOrderByWithRelationInput = {
    artist_id?: SortOrder
    name?: SortOrder
    songs?: songsOrderByRelationAggregateInput
    _relevance?: artistsOrderByRelevanceInput
  }

  export type artistsWhereUniqueInput = Prisma.AtLeast<{
    artist_id?: number
    AND?: artistsWhereInput | artistsWhereInput[]
    OR?: artistsWhereInput[]
    NOT?: artistsWhereInput | artistsWhereInput[]
    name?: StringFilter<"artists"> | string
    songs?: SongsListRelationFilter
  }, "artist_id">

  export type artistsOrderByWithAggregationInput = {
    artist_id?: SortOrder
    name?: SortOrder
    _count?: artistsCountOrderByAggregateInput
    _avg?: artistsAvgOrderByAggregateInput
    _max?: artistsMaxOrderByAggregateInput
    _min?: artistsMinOrderByAggregateInput
    _sum?: artistsSumOrderByAggregateInput
  }

  export type artistsScalarWhereWithAggregatesInput = {
    AND?: artistsScalarWhereWithAggregatesInput | artistsScalarWhereWithAggregatesInput[]
    OR?: artistsScalarWhereWithAggregatesInput[]
    NOT?: artistsScalarWhereWithAggregatesInput | artistsScalarWhereWithAggregatesInput[]
    artist_id?: IntWithAggregatesFilter<"artists"> | number
    name?: StringWithAggregatesFilter<"artists"> | string
  }

  export type songsWhereInput = {
    AND?: songsWhereInput | songsWhereInput[]
    OR?: songsWhereInput[]
    NOT?: songsWhereInput | songsWhereInput[]
    song_id?: IntFilter<"songs"> | number
    name?: StringFilter<"songs"> | string
    artist_id?: IntNullableFilter<"songs"> | number | null
    artists?: XOR<ArtistsNullableScalarRelationFilter, artistsWhereInput> | null
    votes?: VotesListRelationFilter
  }

  export type songsOrderByWithRelationInput = {
    song_id?: SortOrder
    name?: SortOrder
    artist_id?: SortOrderInput | SortOrder
    artists?: artistsOrderByWithRelationInput
    votes?: votesOrderByRelationAggregateInput
    _relevance?: songsOrderByRelevanceInput
  }

  export type songsWhereUniqueInput = Prisma.AtLeast<{
    song_id?: number
    AND?: songsWhereInput | songsWhereInput[]
    OR?: songsWhereInput[]
    NOT?: songsWhereInput | songsWhereInput[]
    name?: StringFilter<"songs"> | string
    artist_id?: IntNullableFilter<"songs"> | number | null
    artists?: XOR<ArtistsNullableScalarRelationFilter, artistsWhereInput> | null
    votes?: VotesListRelationFilter
  }, "song_id">

  export type songsOrderByWithAggregationInput = {
    song_id?: SortOrder
    name?: SortOrder
    artist_id?: SortOrderInput | SortOrder
    _count?: songsCountOrderByAggregateInput
    _avg?: songsAvgOrderByAggregateInput
    _max?: songsMaxOrderByAggregateInput
    _min?: songsMinOrderByAggregateInput
    _sum?: songsSumOrderByAggregateInput
  }

  export type songsScalarWhereWithAggregatesInput = {
    AND?: songsScalarWhereWithAggregatesInput | songsScalarWhereWithAggregatesInput[]
    OR?: songsScalarWhereWithAggregatesInput[]
    NOT?: songsScalarWhereWithAggregatesInput | songsScalarWhereWithAggregatesInput[]
    song_id?: IntWithAggregatesFilter<"songs"> | number
    name?: StringWithAggregatesFilter<"songs"> | string
    artist_id?: IntNullableWithAggregatesFilter<"songs"> | number | null
  }

  export type votersWhereInput = {
    AND?: votersWhereInput | votersWhereInput[]
    OR?: votersWhereInput[]
    NOT?: votersWhereInput | votersWhereInput[]
    voter_id?: IntFilter<"voters"> | number
    name?: StringFilter<"voters"> | string
    votes?: VotesListRelationFilter
  }

  export type votersOrderByWithRelationInput = {
    voter_id?: SortOrder
    name?: SortOrder
    votes?: votesOrderByRelationAggregateInput
    _relevance?: votersOrderByRelevanceInput
  }

  export type votersWhereUniqueInput = Prisma.AtLeast<{
    voter_id?: number
    AND?: votersWhereInput | votersWhereInput[]
    OR?: votersWhereInput[]
    NOT?: votersWhereInput | votersWhereInput[]
    name?: StringFilter<"voters"> | string
    votes?: VotesListRelationFilter
  }, "voter_id">

  export type votersOrderByWithAggregationInput = {
    voter_id?: SortOrder
    name?: SortOrder
    _count?: votersCountOrderByAggregateInput
    _avg?: votersAvgOrderByAggregateInput
    _max?: votersMaxOrderByAggregateInput
    _min?: votersMinOrderByAggregateInput
    _sum?: votersSumOrderByAggregateInput
  }

  export type votersScalarWhereWithAggregatesInput = {
    AND?: votersScalarWhereWithAggregatesInput | votersScalarWhereWithAggregatesInput[]
    OR?: votersScalarWhereWithAggregatesInput[]
    NOT?: votersScalarWhereWithAggregatesInput | votersScalarWhereWithAggregatesInput[]
    voter_id?: IntWithAggregatesFilter<"voters"> | number
    name?: StringWithAggregatesFilter<"voters"> | string
  }

  export type votesWhereInput = {
    AND?: votesWhereInput | votesWhereInput[]
    OR?: votesWhereInput[]
    NOT?: votesWhereInput | votesWhereInput[]
    vote_id?: IntFilter<"votes"> | number
    voter_id?: IntNullableFilter<"votes"> | number | null
    song_id?: IntNullableFilter<"votes"> | number | null
    points?: IntNullableFilter<"votes"> | number | null
    voters?: XOR<VotersNullableScalarRelationFilter, votersWhereInput> | null
    songs?: XOR<SongsNullableScalarRelationFilter, songsWhereInput> | null
  }

  export type votesOrderByWithRelationInput = {
    vote_id?: SortOrder
    voter_id?: SortOrderInput | SortOrder
    song_id?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    voters?: votersOrderByWithRelationInput
    songs?: songsOrderByWithRelationInput
  }

  export type votesWhereUniqueInput = Prisma.AtLeast<{
    vote_id?: number
    AND?: votesWhereInput | votesWhereInput[]
    OR?: votesWhereInput[]
    NOT?: votesWhereInput | votesWhereInput[]
    voter_id?: IntNullableFilter<"votes"> | number | null
    song_id?: IntNullableFilter<"votes"> | number | null
    points?: IntNullableFilter<"votes"> | number | null
    voters?: XOR<VotersNullableScalarRelationFilter, votersWhereInput> | null
    songs?: XOR<SongsNullableScalarRelationFilter, songsWhereInput> | null
  }, "vote_id">

  export type votesOrderByWithAggregationInput = {
    vote_id?: SortOrder
    voter_id?: SortOrderInput | SortOrder
    song_id?: SortOrderInput | SortOrder
    points?: SortOrderInput | SortOrder
    _count?: votesCountOrderByAggregateInput
    _avg?: votesAvgOrderByAggregateInput
    _max?: votesMaxOrderByAggregateInput
    _min?: votesMinOrderByAggregateInput
    _sum?: votesSumOrderByAggregateInput
  }

  export type votesScalarWhereWithAggregatesInput = {
    AND?: votesScalarWhereWithAggregatesInput | votesScalarWhereWithAggregatesInput[]
    OR?: votesScalarWhereWithAggregatesInput[]
    NOT?: votesScalarWhereWithAggregatesInput | votesScalarWhereWithAggregatesInput[]
    vote_id?: IntWithAggregatesFilter<"votes"> | number
    voter_id?: IntNullableWithAggregatesFilter<"votes"> | number | null
    song_id?: IntNullableWithAggregatesFilter<"votes"> | number | null
    points?: IntNullableWithAggregatesFilter<"votes"> | number | null
  }

  export type artistsCreateInput = {
    name: string
    songs?: songsCreateNestedManyWithoutArtistsInput
  }

  export type artistsUncheckedCreateInput = {
    artist_id?: number
    name: string
    songs?: songsUncheckedCreateNestedManyWithoutArtistsInput
  }

  export type artistsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    songs?: songsUpdateManyWithoutArtistsNestedInput
  }

  export type artistsUncheckedUpdateInput = {
    artist_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    songs?: songsUncheckedUpdateManyWithoutArtistsNestedInput
  }

  export type artistsCreateManyInput = {
    artist_id?: number
    name: string
  }

  export type artistsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type artistsUncheckedUpdateManyInput = {
    artist_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type songsCreateInput = {
    name: string
    artists?: artistsCreateNestedOneWithoutSongsInput
    votes?: votesCreateNestedManyWithoutSongsInput
  }

  export type songsUncheckedCreateInput = {
    song_id?: number
    name: string
    artist_id?: number | null
    votes?: votesUncheckedCreateNestedManyWithoutSongsInput
  }

  export type songsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    artists?: artistsUpdateOneWithoutSongsNestedInput
    votes?: votesUpdateManyWithoutSongsNestedInput
  }

  export type songsUncheckedUpdateInput = {
    song_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    artist_id?: NullableIntFieldUpdateOperationsInput | number | null
    votes?: votesUncheckedUpdateManyWithoutSongsNestedInput
  }

  export type songsCreateManyInput = {
    song_id?: number
    name: string
    artist_id?: number | null
  }

  export type songsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type songsUncheckedUpdateManyInput = {
    song_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    artist_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votersCreateInput = {
    name: string
    votes?: votesCreateNestedManyWithoutVotersInput
  }

  export type votersUncheckedCreateInput = {
    voter_id?: number
    name: string
    votes?: votesUncheckedCreateNestedManyWithoutVotersInput
  }

  export type votersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    votes?: votesUpdateManyWithoutVotersNestedInput
  }

  export type votersUncheckedUpdateInput = {
    voter_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    votes?: votesUncheckedUpdateManyWithoutVotersNestedInput
  }

  export type votersCreateManyInput = {
    voter_id?: number
    name: string
  }

  export type votersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type votersUncheckedUpdateManyInput = {
    voter_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type votesCreateInput = {
    points?: number | null
    voters?: votersCreateNestedOneWithoutVotesInput
    songs?: songsCreateNestedOneWithoutVotesInput
  }

  export type votesUncheckedCreateInput = {
    vote_id?: number
    voter_id?: number | null
    song_id?: number | null
    points?: number | null
  }

  export type votesUpdateInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    voters?: votersUpdateOneWithoutVotesNestedInput
    songs?: songsUpdateOneWithoutVotesNestedInput
  }

  export type votesUncheckedUpdateInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    voter_id?: NullableIntFieldUpdateOperationsInput | number | null
    song_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votesCreateManyInput = {
    vote_id?: number
    voter_id?: number | null
    song_id?: number | null
    points?: number | null
  }

  export type votesUpdateManyMutationInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votesUncheckedUpdateManyInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    voter_id?: NullableIntFieldUpdateOperationsInput | number | null
    song_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SongsListRelationFilter = {
    every?: songsWhereInput
    some?: songsWhereInput
    none?: songsWhereInput
  }

  export type songsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type artistsOrderByRelevanceInput = {
    fields: artistsOrderByRelevanceFieldEnum | artistsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type artistsCountOrderByAggregateInput = {
    artist_id?: SortOrder
    name?: SortOrder
  }

  export type artistsAvgOrderByAggregateInput = {
    artist_id?: SortOrder
  }

  export type artistsMaxOrderByAggregateInput = {
    artist_id?: SortOrder
    name?: SortOrder
  }

  export type artistsMinOrderByAggregateInput = {
    artist_id?: SortOrder
    name?: SortOrder
  }

  export type artistsSumOrderByAggregateInput = {
    artist_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ArtistsNullableScalarRelationFilter = {
    is?: artistsWhereInput | null
    isNot?: artistsWhereInput | null
  }

  export type VotesListRelationFilter = {
    every?: votesWhereInput
    some?: votesWhereInput
    none?: votesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type votesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type songsOrderByRelevanceInput = {
    fields: songsOrderByRelevanceFieldEnum | songsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type songsCountOrderByAggregateInput = {
    song_id?: SortOrder
    name?: SortOrder
    artist_id?: SortOrder
  }

  export type songsAvgOrderByAggregateInput = {
    song_id?: SortOrder
    artist_id?: SortOrder
  }

  export type songsMaxOrderByAggregateInput = {
    song_id?: SortOrder
    name?: SortOrder
    artist_id?: SortOrder
  }

  export type songsMinOrderByAggregateInput = {
    song_id?: SortOrder
    name?: SortOrder
    artist_id?: SortOrder
  }

  export type songsSumOrderByAggregateInput = {
    song_id?: SortOrder
    artist_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type votersOrderByRelevanceInput = {
    fields: votersOrderByRelevanceFieldEnum | votersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type votersCountOrderByAggregateInput = {
    voter_id?: SortOrder
    name?: SortOrder
  }

  export type votersAvgOrderByAggregateInput = {
    voter_id?: SortOrder
  }

  export type votersMaxOrderByAggregateInput = {
    voter_id?: SortOrder
    name?: SortOrder
  }

  export type votersMinOrderByAggregateInput = {
    voter_id?: SortOrder
    name?: SortOrder
  }

  export type votersSumOrderByAggregateInput = {
    voter_id?: SortOrder
  }

  export type VotersNullableScalarRelationFilter = {
    is?: votersWhereInput | null
    isNot?: votersWhereInput | null
  }

  export type SongsNullableScalarRelationFilter = {
    is?: songsWhereInput | null
    isNot?: songsWhereInput | null
  }

  export type votesCountOrderByAggregateInput = {
    vote_id?: SortOrder
    voter_id?: SortOrder
    song_id?: SortOrder
    points?: SortOrder
  }

  export type votesAvgOrderByAggregateInput = {
    vote_id?: SortOrder
    voter_id?: SortOrder
    song_id?: SortOrder
    points?: SortOrder
  }

  export type votesMaxOrderByAggregateInput = {
    vote_id?: SortOrder
    voter_id?: SortOrder
    song_id?: SortOrder
    points?: SortOrder
  }

  export type votesMinOrderByAggregateInput = {
    vote_id?: SortOrder
    voter_id?: SortOrder
    song_id?: SortOrder
    points?: SortOrder
  }

  export type votesSumOrderByAggregateInput = {
    vote_id?: SortOrder
    voter_id?: SortOrder
    song_id?: SortOrder
    points?: SortOrder
  }

  export type songsCreateNestedManyWithoutArtistsInput = {
    create?: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput> | songsCreateWithoutArtistsInput[] | songsUncheckedCreateWithoutArtistsInput[]
    connectOrCreate?: songsCreateOrConnectWithoutArtistsInput | songsCreateOrConnectWithoutArtistsInput[]
    createMany?: songsCreateManyArtistsInputEnvelope
    connect?: songsWhereUniqueInput | songsWhereUniqueInput[]
  }

  export type songsUncheckedCreateNestedManyWithoutArtistsInput = {
    create?: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput> | songsCreateWithoutArtistsInput[] | songsUncheckedCreateWithoutArtistsInput[]
    connectOrCreate?: songsCreateOrConnectWithoutArtistsInput | songsCreateOrConnectWithoutArtistsInput[]
    createMany?: songsCreateManyArtistsInputEnvelope
    connect?: songsWhereUniqueInput | songsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type songsUpdateManyWithoutArtistsNestedInput = {
    create?: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput> | songsCreateWithoutArtistsInput[] | songsUncheckedCreateWithoutArtistsInput[]
    connectOrCreate?: songsCreateOrConnectWithoutArtistsInput | songsCreateOrConnectWithoutArtistsInput[]
    upsert?: songsUpsertWithWhereUniqueWithoutArtistsInput | songsUpsertWithWhereUniqueWithoutArtistsInput[]
    createMany?: songsCreateManyArtistsInputEnvelope
    set?: songsWhereUniqueInput | songsWhereUniqueInput[]
    disconnect?: songsWhereUniqueInput | songsWhereUniqueInput[]
    delete?: songsWhereUniqueInput | songsWhereUniqueInput[]
    connect?: songsWhereUniqueInput | songsWhereUniqueInput[]
    update?: songsUpdateWithWhereUniqueWithoutArtistsInput | songsUpdateWithWhereUniqueWithoutArtistsInput[]
    updateMany?: songsUpdateManyWithWhereWithoutArtistsInput | songsUpdateManyWithWhereWithoutArtistsInput[]
    deleteMany?: songsScalarWhereInput | songsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type songsUncheckedUpdateManyWithoutArtistsNestedInput = {
    create?: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput> | songsCreateWithoutArtistsInput[] | songsUncheckedCreateWithoutArtistsInput[]
    connectOrCreate?: songsCreateOrConnectWithoutArtistsInput | songsCreateOrConnectWithoutArtistsInput[]
    upsert?: songsUpsertWithWhereUniqueWithoutArtistsInput | songsUpsertWithWhereUniqueWithoutArtistsInput[]
    createMany?: songsCreateManyArtistsInputEnvelope
    set?: songsWhereUniqueInput | songsWhereUniqueInput[]
    disconnect?: songsWhereUniqueInput | songsWhereUniqueInput[]
    delete?: songsWhereUniqueInput | songsWhereUniqueInput[]
    connect?: songsWhereUniqueInput | songsWhereUniqueInput[]
    update?: songsUpdateWithWhereUniqueWithoutArtistsInput | songsUpdateWithWhereUniqueWithoutArtistsInput[]
    updateMany?: songsUpdateManyWithWhereWithoutArtistsInput | songsUpdateManyWithWhereWithoutArtistsInput[]
    deleteMany?: songsScalarWhereInput | songsScalarWhereInput[]
  }

  export type artistsCreateNestedOneWithoutSongsInput = {
    create?: XOR<artistsCreateWithoutSongsInput, artistsUncheckedCreateWithoutSongsInput>
    connectOrCreate?: artistsCreateOrConnectWithoutSongsInput
    connect?: artistsWhereUniqueInput
  }

  export type votesCreateNestedManyWithoutSongsInput = {
    create?: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput> | votesCreateWithoutSongsInput[] | votesUncheckedCreateWithoutSongsInput[]
    connectOrCreate?: votesCreateOrConnectWithoutSongsInput | votesCreateOrConnectWithoutSongsInput[]
    createMany?: votesCreateManySongsInputEnvelope
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
  }

  export type votesUncheckedCreateNestedManyWithoutSongsInput = {
    create?: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput> | votesCreateWithoutSongsInput[] | votesUncheckedCreateWithoutSongsInput[]
    connectOrCreate?: votesCreateOrConnectWithoutSongsInput | votesCreateOrConnectWithoutSongsInput[]
    createMany?: votesCreateManySongsInputEnvelope
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
  }

  export type artistsUpdateOneWithoutSongsNestedInput = {
    create?: XOR<artistsCreateWithoutSongsInput, artistsUncheckedCreateWithoutSongsInput>
    connectOrCreate?: artistsCreateOrConnectWithoutSongsInput
    upsert?: artistsUpsertWithoutSongsInput
    disconnect?: artistsWhereInput | boolean
    delete?: artistsWhereInput | boolean
    connect?: artistsWhereUniqueInput
    update?: XOR<XOR<artistsUpdateToOneWithWhereWithoutSongsInput, artistsUpdateWithoutSongsInput>, artistsUncheckedUpdateWithoutSongsInput>
  }

  export type votesUpdateManyWithoutSongsNestedInput = {
    create?: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput> | votesCreateWithoutSongsInput[] | votesUncheckedCreateWithoutSongsInput[]
    connectOrCreate?: votesCreateOrConnectWithoutSongsInput | votesCreateOrConnectWithoutSongsInput[]
    upsert?: votesUpsertWithWhereUniqueWithoutSongsInput | votesUpsertWithWhereUniqueWithoutSongsInput[]
    createMany?: votesCreateManySongsInputEnvelope
    set?: votesWhereUniqueInput | votesWhereUniqueInput[]
    disconnect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    delete?: votesWhereUniqueInput | votesWhereUniqueInput[]
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    update?: votesUpdateWithWhereUniqueWithoutSongsInput | votesUpdateWithWhereUniqueWithoutSongsInput[]
    updateMany?: votesUpdateManyWithWhereWithoutSongsInput | votesUpdateManyWithWhereWithoutSongsInput[]
    deleteMany?: votesScalarWhereInput | votesScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type votesUncheckedUpdateManyWithoutSongsNestedInput = {
    create?: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput> | votesCreateWithoutSongsInput[] | votesUncheckedCreateWithoutSongsInput[]
    connectOrCreate?: votesCreateOrConnectWithoutSongsInput | votesCreateOrConnectWithoutSongsInput[]
    upsert?: votesUpsertWithWhereUniqueWithoutSongsInput | votesUpsertWithWhereUniqueWithoutSongsInput[]
    createMany?: votesCreateManySongsInputEnvelope
    set?: votesWhereUniqueInput | votesWhereUniqueInput[]
    disconnect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    delete?: votesWhereUniqueInput | votesWhereUniqueInput[]
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    update?: votesUpdateWithWhereUniqueWithoutSongsInput | votesUpdateWithWhereUniqueWithoutSongsInput[]
    updateMany?: votesUpdateManyWithWhereWithoutSongsInput | votesUpdateManyWithWhereWithoutSongsInput[]
    deleteMany?: votesScalarWhereInput | votesScalarWhereInput[]
  }

  export type votesCreateNestedManyWithoutVotersInput = {
    create?: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput> | votesCreateWithoutVotersInput[] | votesUncheckedCreateWithoutVotersInput[]
    connectOrCreate?: votesCreateOrConnectWithoutVotersInput | votesCreateOrConnectWithoutVotersInput[]
    createMany?: votesCreateManyVotersInputEnvelope
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
  }

  export type votesUncheckedCreateNestedManyWithoutVotersInput = {
    create?: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput> | votesCreateWithoutVotersInput[] | votesUncheckedCreateWithoutVotersInput[]
    connectOrCreate?: votesCreateOrConnectWithoutVotersInput | votesCreateOrConnectWithoutVotersInput[]
    createMany?: votesCreateManyVotersInputEnvelope
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
  }

  export type votesUpdateManyWithoutVotersNestedInput = {
    create?: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput> | votesCreateWithoutVotersInput[] | votesUncheckedCreateWithoutVotersInput[]
    connectOrCreate?: votesCreateOrConnectWithoutVotersInput | votesCreateOrConnectWithoutVotersInput[]
    upsert?: votesUpsertWithWhereUniqueWithoutVotersInput | votesUpsertWithWhereUniqueWithoutVotersInput[]
    createMany?: votesCreateManyVotersInputEnvelope
    set?: votesWhereUniqueInput | votesWhereUniqueInput[]
    disconnect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    delete?: votesWhereUniqueInput | votesWhereUniqueInput[]
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    update?: votesUpdateWithWhereUniqueWithoutVotersInput | votesUpdateWithWhereUniqueWithoutVotersInput[]
    updateMany?: votesUpdateManyWithWhereWithoutVotersInput | votesUpdateManyWithWhereWithoutVotersInput[]
    deleteMany?: votesScalarWhereInput | votesScalarWhereInput[]
  }

  export type votesUncheckedUpdateManyWithoutVotersNestedInput = {
    create?: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput> | votesCreateWithoutVotersInput[] | votesUncheckedCreateWithoutVotersInput[]
    connectOrCreate?: votesCreateOrConnectWithoutVotersInput | votesCreateOrConnectWithoutVotersInput[]
    upsert?: votesUpsertWithWhereUniqueWithoutVotersInput | votesUpsertWithWhereUniqueWithoutVotersInput[]
    createMany?: votesCreateManyVotersInputEnvelope
    set?: votesWhereUniqueInput | votesWhereUniqueInput[]
    disconnect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    delete?: votesWhereUniqueInput | votesWhereUniqueInput[]
    connect?: votesWhereUniqueInput | votesWhereUniqueInput[]
    update?: votesUpdateWithWhereUniqueWithoutVotersInput | votesUpdateWithWhereUniqueWithoutVotersInput[]
    updateMany?: votesUpdateManyWithWhereWithoutVotersInput | votesUpdateManyWithWhereWithoutVotersInput[]
    deleteMany?: votesScalarWhereInput | votesScalarWhereInput[]
  }

  export type votersCreateNestedOneWithoutVotesInput = {
    create?: XOR<votersCreateWithoutVotesInput, votersUncheckedCreateWithoutVotesInput>
    connectOrCreate?: votersCreateOrConnectWithoutVotesInput
    connect?: votersWhereUniqueInput
  }

  export type songsCreateNestedOneWithoutVotesInput = {
    create?: XOR<songsCreateWithoutVotesInput, songsUncheckedCreateWithoutVotesInput>
    connectOrCreate?: songsCreateOrConnectWithoutVotesInput
    connect?: songsWhereUniqueInput
  }

  export type votersUpdateOneWithoutVotesNestedInput = {
    create?: XOR<votersCreateWithoutVotesInput, votersUncheckedCreateWithoutVotesInput>
    connectOrCreate?: votersCreateOrConnectWithoutVotesInput
    upsert?: votersUpsertWithoutVotesInput
    disconnect?: votersWhereInput | boolean
    delete?: votersWhereInput | boolean
    connect?: votersWhereUniqueInput
    update?: XOR<XOR<votersUpdateToOneWithWhereWithoutVotesInput, votersUpdateWithoutVotesInput>, votersUncheckedUpdateWithoutVotesInput>
  }

  export type songsUpdateOneWithoutVotesNestedInput = {
    create?: XOR<songsCreateWithoutVotesInput, songsUncheckedCreateWithoutVotesInput>
    connectOrCreate?: songsCreateOrConnectWithoutVotesInput
    upsert?: songsUpsertWithoutVotesInput
    disconnect?: songsWhereInput | boolean
    delete?: songsWhereInput | boolean
    connect?: songsWhereUniqueInput
    update?: XOR<XOR<songsUpdateToOneWithWhereWithoutVotesInput, songsUpdateWithoutVotesInput>, songsUncheckedUpdateWithoutVotesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type songsCreateWithoutArtistsInput = {
    name: string
    votes?: votesCreateNestedManyWithoutSongsInput
  }

  export type songsUncheckedCreateWithoutArtistsInput = {
    song_id?: number
    name: string
    votes?: votesUncheckedCreateNestedManyWithoutSongsInput
  }

  export type songsCreateOrConnectWithoutArtistsInput = {
    where: songsWhereUniqueInput
    create: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput>
  }

  export type songsCreateManyArtistsInputEnvelope = {
    data: songsCreateManyArtistsInput | songsCreateManyArtistsInput[]
    skipDuplicates?: boolean
  }

  export type songsUpsertWithWhereUniqueWithoutArtistsInput = {
    where: songsWhereUniqueInput
    update: XOR<songsUpdateWithoutArtistsInput, songsUncheckedUpdateWithoutArtistsInput>
    create: XOR<songsCreateWithoutArtistsInput, songsUncheckedCreateWithoutArtistsInput>
  }

  export type songsUpdateWithWhereUniqueWithoutArtistsInput = {
    where: songsWhereUniqueInput
    data: XOR<songsUpdateWithoutArtistsInput, songsUncheckedUpdateWithoutArtistsInput>
  }

  export type songsUpdateManyWithWhereWithoutArtistsInput = {
    where: songsScalarWhereInput
    data: XOR<songsUpdateManyMutationInput, songsUncheckedUpdateManyWithoutArtistsInput>
  }

  export type songsScalarWhereInput = {
    AND?: songsScalarWhereInput | songsScalarWhereInput[]
    OR?: songsScalarWhereInput[]
    NOT?: songsScalarWhereInput | songsScalarWhereInput[]
    song_id?: IntFilter<"songs"> | number
    name?: StringFilter<"songs"> | string
    artist_id?: IntNullableFilter<"songs"> | number | null
  }

  export type artistsCreateWithoutSongsInput = {
    name: string
  }

  export type artistsUncheckedCreateWithoutSongsInput = {
    artist_id?: number
    name: string
  }

  export type artistsCreateOrConnectWithoutSongsInput = {
    where: artistsWhereUniqueInput
    create: XOR<artistsCreateWithoutSongsInput, artistsUncheckedCreateWithoutSongsInput>
  }

  export type votesCreateWithoutSongsInput = {
    points?: number | null
    voters?: votersCreateNestedOneWithoutVotesInput
  }

  export type votesUncheckedCreateWithoutSongsInput = {
    vote_id?: number
    voter_id?: number | null
    points?: number | null
  }

  export type votesCreateOrConnectWithoutSongsInput = {
    where: votesWhereUniqueInput
    create: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput>
  }

  export type votesCreateManySongsInputEnvelope = {
    data: votesCreateManySongsInput | votesCreateManySongsInput[]
    skipDuplicates?: boolean
  }

  export type artistsUpsertWithoutSongsInput = {
    update: XOR<artistsUpdateWithoutSongsInput, artistsUncheckedUpdateWithoutSongsInput>
    create: XOR<artistsCreateWithoutSongsInput, artistsUncheckedCreateWithoutSongsInput>
    where?: artistsWhereInput
  }

  export type artistsUpdateToOneWithWhereWithoutSongsInput = {
    where?: artistsWhereInput
    data: XOR<artistsUpdateWithoutSongsInput, artistsUncheckedUpdateWithoutSongsInput>
  }

  export type artistsUpdateWithoutSongsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type artistsUncheckedUpdateWithoutSongsInput = {
    artist_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type votesUpsertWithWhereUniqueWithoutSongsInput = {
    where: votesWhereUniqueInput
    update: XOR<votesUpdateWithoutSongsInput, votesUncheckedUpdateWithoutSongsInput>
    create: XOR<votesCreateWithoutSongsInput, votesUncheckedCreateWithoutSongsInput>
  }

  export type votesUpdateWithWhereUniqueWithoutSongsInput = {
    where: votesWhereUniqueInput
    data: XOR<votesUpdateWithoutSongsInput, votesUncheckedUpdateWithoutSongsInput>
  }

  export type votesUpdateManyWithWhereWithoutSongsInput = {
    where: votesScalarWhereInput
    data: XOR<votesUpdateManyMutationInput, votesUncheckedUpdateManyWithoutSongsInput>
  }

  export type votesScalarWhereInput = {
    AND?: votesScalarWhereInput | votesScalarWhereInput[]
    OR?: votesScalarWhereInput[]
    NOT?: votesScalarWhereInput | votesScalarWhereInput[]
    vote_id?: IntFilter<"votes"> | number
    voter_id?: IntNullableFilter<"votes"> | number | null
    song_id?: IntNullableFilter<"votes"> | number | null
    points?: IntNullableFilter<"votes"> | number | null
  }

  export type votesCreateWithoutVotersInput = {
    points?: number | null
    songs?: songsCreateNestedOneWithoutVotesInput
  }

  export type votesUncheckedCreateWithoutVotersInput = {
    vote_id?: number
    song_id?: number | null
    points?: number | null
  }

  export type votesCreateOrConnectWithoutVotersInput = {
    where: votesWhereUniqueInput
    create: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput>
  }

  export type votesCreateManyVotersInputEnvelope = {
    data: votesCreateManyVotersInput | votesCreateManyVotersInput[]
    skipDuplicates?: boolean
  }

  export type votesUpsertWithWhereUniqueWithoutVotersInput = {
    where: votesWhereUniqueInput
    update: XOR<votesUpdateWithoutVotersInput, votesUncheckedUpdateWithoutVotersInput>
    create: XOR<votesCreateWithoutVotersInput, votesUncheckedCreateWithoutVotersInput>
  }

  export type votesUpdateWithWhereUniqueWithoutVotersInput = {
    where: votesWhereUniqueInput
    data: XOR<votesUpdateWithoutVotersInput, votesUncheckedUpdateWithoutVotersInput>
  }

  export type votesUpdateManyWithWhereWithoutVotersInput = {
    where: votesScalarWhereInput
    data: XOR<votesUpdateManyMutationInput, votesUncheckedUpdateManyWithoutVotersInput>
  }

  export type votersCreateWithoutVotesInput = {
    name: string
  }

  export type votersUncheckedCreateWithoutVotesInput = {
    voter_id?: number
    name: string
  }

  export type votersCreateOrConnectWithoutVotesInput = {
    where: votersWhereUniqueInput
    create: XOR<votersCreateWithoutVotesInput, votersUncheckedCreateWithoutVotesInput>
  }

  export type songsCreateWithoutVotesInput = {
    name: string
    artists?: artistsCreateNestedOneWithoutSongsInput
  }

  export type songsUncheckedCreateWithoutVotesInput = {
    song_id?: number
    name: string
    artist_id?: number | null
  }

  export type songsCreateOrConnectWithoutVotesInput = {
    where: songsWhereUniqueInput
    create: XOR<songsCreateWithoutVotesInput, songsUncheckedCreateWithoutVotesInput>
  }

  export type votersUpsertWithoutVotesInput = {
    update: XOR<votersUpdateWithoutVotesInput, votersUncheckedUpdateWithoutVotesInput>
    create: XOR<votersCreateWithoutVotesInput, votersUncheckedCreateWithoutVotesInput>
    where?: votersWhereInput
  }

  export type votersUpdateToOneWithWhereWithoutVotesInput = {
    where?: votersWhereInput
    data: XOR<votersUpdateWithoutVotesInput, votersUncheckedUpdateWithoutVotesInput>
  }

  export type votersUpdateWithoutVotesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type votersUncheckedUpdateWithoutVotesInput = {
    voter_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type songsUpsertWithoutVotesInput = {
    update: XOR<songsUpdateWithoutVotesInput, songsUncheckedUpdateWithoutVotesInput>
    create: XOR<songsCreateWithoutVotesInput, songsUncheckedCreateWithoutVotesInput>
    where?: songsWhereInput
  }

  export type songsUpdateToOneWithWhereWithoutVotesInput = {
    where?: songsWhereInput
    data: XOR<songsUpdateWithoutVotesInput, songsUncheckedUpdateWithoutVotesInput>
  }

  export type songsUpdateWithoutVotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    artists?: artistsUpdateOneWithoutSongsNestedInput
  }

  export type songsUncheckedUpdateWithoutVotesInput = {
    song_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    artist_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type songsCreateManyArtistsInput = {
    song_id?: number
    name: string
  }

  export type songsUpdateWithoutArtistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    votes?: votesUpdateManyWithoutSongsNestedInput
  }

  export type songsUncheckedUpdateWithoutArtistsInput = {
    song_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    votes?: votesUncheckedUpdateManyWithoutSongsNestedInput
  }

  export type songsUncheckedUpdateManyWithoutArtistsInput = {
    song_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type votesCreateManySongsInput = {
    vote_id?: number
    voter_id?: number | null
    points?: number | null
  }

  export type votesUpdateWithoutSongsInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    voters?: votersUpdateOneWithoutVotesNestedInput
  }

  export type votesUncheckedUpdateWithoutSongsInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    voter_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votesUncheckedUpdateManyWithoutSongsInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    voter_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votesCreateManyVotersInput = {
    vote_id?: number
    song_id?: number | null
    points?: number | null
  }

  export type votesUpdateWithoutVotersInput = {
    points?: NullableIntFieldUpdateOperationsInput | number | null
    songs?: songsUpdateOneWithoutVotesNestedInput
  }

  export type votesUncheckedUpdateWithoutVotersInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    song_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type votesUncheckedUpdateManyWithoutVotersInput = {
    vote_id?: IntFieldUpdateOperationsInput | number
    song_id?: NullableIntFieldUpdateOperationsInput | number | null
    points?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}